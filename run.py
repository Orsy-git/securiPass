from flask import Flask, render_template, request, jsonify
import random
import string

# --- INITIALISATION ET √âTAT GLOBAL ---
app = Flask(__name__)
generated_count = 0
history_list = []
MAX_HISTORY = 5 

# --- LOGIQUE DE L'OUTIL DE S√âCURIT√â ---

def generer_mot_de_passe(longueur=16):
    """G√©n√®re un mot de passe fort avec une diversit√© assur√©e."""
    minuscules = string.ascii_lowercase
    majuscules = string.ascii_uppercase
    chiffres = string.digits
    symboles = string.punctuation
    
    tous_les_caracteres = minuscules + majuscules + chiffres + symboles
    
    if longueur < 4:
        longueur = 4

    # Assure la pr√©sence d'au moins un de chaque type
    mot_de_passe = [
        random.choice(minuscules),
        random.choice(majuscules),
        random.choice(chiffres),
        random.choice(symboles)
    ]
    
    # Compl√®te la longueur restante
    mot_de_passe += random.choices(tous_les_caracteres, k=longueur - 4)
    random.shuffle(mot_de_passe)
    
    return "".join(mot_de_passe[:longueur])

def evaluer_force(mdp):
    """√âvalue la force d'un mot de passe sur 7 points."""
    longueur = len(mdp)
    score = 0
    feedback = []
    
    # Crit√®re 1: Longueur (jusqu'√† 3 points)
    if longueur >= 16:
        score += 3
        feedback.append("‚úîÔ∏è Longueur excellente (>= 16 caract√®res).")
    elif longueur >= 12:
        score += 2
        feedback.append("‚ö†Ô∏è Longueur bonne (>= 12 caract√®res), visez plus long.")
    else:
        score += 1
        feedback.append("‚ùå Longueur trop courte. Visez au moins 16 caract√®res.")
        
    # Crit√®re 2: Diversit√© (jusqu'√† 4 points)
    a_minuscule = any(c.islower() for c in mdp)
    a_majuscule = any(c.isupper() for c in mdp)
    a_chiffre = any(c.isdigit() for c in mdp)
    a_symbole = any(c in string.punctuation for c in mdp)
    
    types_present = sum([a_minuscule, a_majuscule, a_chiffre, a_symbole])
    score += types_present
    
    if types_present == 4:
        feedback.append("‚úîÔ∏è Diversit√© maximale (Min, Maj, Chiffre, Symbole).")
    else:
        feedback.append(f"‚ö†Ô∏è Manque de diversit√©. Types de caract√®res pr√©sents : {types_present}/4.")

    # D√©terminer la force finale
    if score >= 7:
        force = "Tr√®s Fort üí™"
    elif score >= 5:
        force = "Fort üëç"
    elif score >= 3:
        force = "Moyen ü§è"
    else:
        force = "Faible üòî"
        
    return force, feedback, score

def get_cyber_tip():
    """Fournit un conseil √©ducatif."""
    return {
        "title": "Le Danger du 'Credential Stuffing'",
        "content": "Utiliser le m√™me mot de passe pour plusieurs sites est la plus grande menace. Si un site est pirat√©, vos autres comptes le seront aussi. Utilisez un mot de passe unique partout, aid√© par un gestionnaire."
    }

# --- ROUTES FLASK ---

@app.route('/')
def home():
    """Route principale, sert la page HTML et transmet les donn√©es initiales."""
    tip = get_cyber_tip()
    return render_template('index.html', 
        cyber_tip_title=tip['title'], 
        cyber_tip_content=tip['content'],
        generated_count=generated_count,
        history_list=history_list
    )

@app.route('/generate', methods=['POST'])
def generate_password_api():
    """API pour la g√©n√©ration (appel√©e par JavaScript)."""
    global generated_count, history_list
    
    data = request.get_json()
    longueur = data.get('length', 16)
    try:
        longueur = int(longueur) if int(longueur) >= 8 else 16
    except ValueError:
        longueur = 16
        
    mdp = generer_mot_de_passe(longueur)
    
    # Mise √† jour de l'√©tat global
    generated_count += 1
    history_list.insert(0, mdp)
    if len(history_list) > MAX_HISTORY:
        history_list.pop()
        
    return jsonify({
        'password': mdp,
        'new_count': generated_count,
        'new_history': history_list
    })

@app.route('/evaluate', methods=['POST'])
def evaluate_password_api():
    """API pour l'√©valuation (appel√©e par JavaScript)."""
    data = request.get_json()
    mdp = data.get('password', '')
    
    force, feedback, score = evaluer_force(mdp)
    
    return jsonify({
        'force': force,
        'feedback': feedback,
        'score': score
    })

if __name__ == '__main__':
    app.run(debug=True)